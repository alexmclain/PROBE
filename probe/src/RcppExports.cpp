// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// PROBE_cpp0_5_6
List PROBE_cpp0_5_6(const arma::vec y, const arma::mat Z, const arma::colvec Wt, const arma::colvec W_var, const arma::colvec delta, const arma::colvec beta_vec, const arma::mat Z2, double sigma2);
RcppExport SEXP _probe_PROBE_cpp0_5_6(SEXP ySEXP, SEXP ZSEXP, SEXP WtSEXP, SEXP W_varSEXP, SEXP deltaSEXP, SEXP beta_vecSEXP, SEXP Z2SEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type Wt(WtSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type W_var(W_varSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type beta_vec(beta_vecSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Z2(Z2SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(PROBE_cpp0_5_6(y, Z, Wt, W_var, delta, beta_vec, Z2, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// PROBE_cpp0_5_6_covs
List PROBE_cpp0_5_6_covs(const arma::vec y, const arma::mat Z, const arma::colvec Wt, const arma::colvec W_var, const arma::colvec delta, const arma::colvec beta_vec, const arma::mat Z2, double sigma2, const arma::mat X);
RcppExport SEXP _probe_PROBE_cpp0_5_6_covs(SEXP ySEXP, SEXP ZSEXP, SEXP WtSEXP, SEXP W_varSEXP, SEXP deltaSEXP, SEXP beta_vecSEXP, SEXP Z2SEXP, SEXP sigma2SEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type Wt(WtSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type W_var(W_varSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type beta_vec(beta_vecSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Z2(Z2SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(PROBE_cpp0_5_6_covs(y, Z, Wt, W_var, delta, beta_vec, Z2, sigma2, X));
    return rcpp_result_gen;
END_RCPP
}
// PROBE_one_cpp
List PROBE_one_cpp(const arma::vec y, const arma::mat Z, const arma::colvec Wt, const arma::colvec W_var, const arma::colvec delta, const arma::colvec beta_vec, const arma::mat Z2, double sigma2, const arma::colvec update_order);
RcppExport SEXP _probe_PROBE_one_cpp(SEXP ySEXP, SEXP ZSEXP, SEXP WtSEXP, SEXP W_varSEXP, SEXP deltaSEXP, SEXP beta_vecSEXP, SEXP Z2SEXP, SEXP sigma2SEXP, SEXP update_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type Wt(WtSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type W_var(W_varSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type beta_vec(beta_vecSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Z2(Z2SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type update_order(update_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(PROBE_one_cpp(y, Z, Wt, W_var, delta, beta_vec, Z2, sigma2, update_order));
    return rcpp_result_gen;
END_RCPP
}
// LM_by_col
List LM_by_col(const arma::vec y, const arma::mat X, double sigma2);
RcppExport SEXP _probe_LM_by_col(SEXP ySEXP, SEXP XSEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(LM_by_col(y, X, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// LM_w_COVS_by_col
List LM_w_COVS_by_col(const arma::vec y, const arma::mat X, const arma::mat COVS, double sigma2);
RcppExport SEXP _probe_LM_w_COVS_by_col(SEXP ySEXP, SEXP XSEXP, SEXP COVSSEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type COVS(COVSSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(LM_w_COVS_by_col(y, X, COVS, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// MVM
List MVM(const arma::mat X, const arma::vec v);
RcppExport SEXP _probe_MVM(SEXP XSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(MVM(X, v));
    return rcpp_result_gen;
END_RCPP
}
// Row_sum
List Row_sum(const arma::mat X);
RcppExport SEXP _probe_Row_sum(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(Row_sum(X));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_probe_PROBE_cpp0_5_6", (DL_FUNC) &_probe_PROBE_cpp0_5_6, 8},
    {"_probe_PROBE_cpp0_5_6_covs", (DL_FUNC) &_probe_PROBE_cpp0_5_6_covs, 9},
    {"_probe_PROBE_one_cpp", (DL_FUNC) &_probe_PROBE_one_cpp, 9},
    {"_probe_LM_by_col", (DL_FUNC) &_probe_LM_by_col, 3},
    {"_probe_LM_w_COVS_by_col", (DL_FUNC) &_probe_LM_w_COVS_by_col, 4},
    {"_probe_MVM", (DL_FUNC) &_probe_MVM, 2},
    {"_probe_Row_sum", (DL_FUNC) &_probe_Row_sum, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_probe(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
